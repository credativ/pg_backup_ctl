.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "PG_BACKUP_CTL" "1" "" "PostgreSQL Tools" "pg_backup_ctl"
.hy
.SH NAME
.PP
pg_backup_ctl \- Utility to back up and recover a running PostgresSQL
database server
.SH SYNOPSIS
.PP
\f[B]pg_backup_ctl\f[] \f[B]\-A\f[] \f[I]ARCHIVEDIR\f[]
[\f[I]OPTIONS\f[]...] \f[I]COMMAND\f[]
.SH DESCRIPTION
.PP
\f[B]pg_backup_ctl\f[] is a tool to simplify the steps needed to make a
full transaction log archival backup of PostgreSQL clusters.
All steps performed by this script can also be done manually.
See
http://www.postgresql.org/docs/current/static/continuous\-archiving.html
for details.
Furthermore, this script implements several functions to prepare for
backups using LVM snapshots.
.PP
Whenever you call \f[B]pg_backup_ctl\f[], you need to issue a
\f[I]COMMAND\f[], which specifies what actions will be taken, and an
\f[I]ARCHIVEDIR\f[], which specifies \f[B]pg_backup_ctl\f[]\[aq]s
working directory \- which is where backups will be placed and from
where they will be restored.
Note that for almost all commands, the PostgreSQL server needs to be
running.
.PP
\f[B]pg_backup_ctl\f[] should be run as the \f[B]postgres\f[] user (or
any other user that runs the postgresql daemon).
In addition, if the \f[B]LVM\f[] features are used, the user needs the
appropriate permissions (add \f[B]sudo\f[] execution privileges for
\f[B]postgres\f[] to the following commands: \f[B]lvcreate\f[],
\f[B]lvremove\f[], \f[B]lvdisplay\f[], \f[B]mount\f[], \f[B]umount\f[]).
.PP
This script supports PostgreSQL 8.3 and above.
.SH COMMANDS
.SS setup
.PP
Adjust the server configuration for transaction log archival and set up
the environment.
\f[B]pg_backup_ctl\f[] will make the following modifications to
\f[B]postgresql.conf\f[] (specified in \f[B]running_config\f[]):
.IP \[bu] 2
\f[B]archive_command\f[] will be set to copy archived WAL files to
\f[I]ARCHIVEDIR\f[]/log/
.IP \[bu] 2
\f[B]wal_level\f[] will be set to \f[B]archive\f[], if isn\[aq]t already
at \f[B]archive\f[] or \f[B]hot\-standby\f[].
.IP \[bu] 2
\f[B]archive_mode\f[] will be set to \f[B]on\f[]
.PP
In order for these changes to take effect, the PostgreSQL instance needs
to be restarted (if they were not already set beforehand).
After that, you should be seeing files appearing in
\f[I]ARCHIVEDIR\f[]/log/.
.PP
Since this command provides the basic settings need for all other
commands, you would want to make sure to run this before anything else.
.SS basebackup
.PP
Perform a base backup of the currently running PostgreSQL cluster.
.PP
You should run this command from a cron job (mind the postgres user)
once a night (once a week or other intervals are also conceivable, but
will lead to huge recovery times for your data volume).
.PP
You could replace this step by taking a file system snapshot.
This might save space and time but would otherwise be functionally
equivalent.
You can also alter the script accordingly.
Look into the line that calls the \f[B]tar\f[] program.
.PP
Note that \f[B]basebackup\f[] will not work if the cluster uses
tablespaces (see \f[B]streambackup\f[] for an alternative which does
support tablespaces).
.SS lvmbasebackup
.PP
Perform a base backup using an LVM snapshot (requires \f[B]\-L\f[],
\f[B]\-M\f[], \f[B]\-n\f[], \f[B]\-N\f[]).
.SS create\-lvmsnapshot
.PP
Create an LVM snapshot for an external backup command like bacula
(requires \f[B]\-L\f[], \f[B]\-M\f[], \f[B]\-n\f[], \f[B]\-N\f[]).
.SS rsyncbackup
.PP
Perform a base backup with rsync.
.PP
This command \f[B]requires rsync\f[] accessible via \f[B]PATH\f[].
Backups performed with rsyncbackup will save disk space between multiple
runs for unchanged files, since they are just hardlinked.
See the \-\-link\-dest parameter of the rsync command.
.SS streambackup
.PP
Perform a streaming base backup.
.PP
This command \f[B]requires PostgreSQL 9.1\f[] and above and
\f[B]pg_basebackup\f[] accessible via \f[B]PATH\f[].
The server should be configured to allow streaming replication
connections.
.SS remove\-lvmsnapshot
.PP
Remove an LVM snapshot created with create\-lvmsnapshot (requires
\f[B]\-M\f[] and \f[B]\-n\f[]).
.SS restore \f[I]BASEBACKUP\f[]
.PP
Restores \f[I]BASEBACKUP\f[] into the directory specified by the
\f[B]\-D\f[] parameter.
This directory must already exist and be empty.
In case the backup contains tablespaces, the respective target
directories need to exist and be empty.
.PP
The destination directory will also contain a generated
\f[B]recovery.conf\f[], suitable for starting a PostgreSQL instance for
recovery immediately.
.PP
It is still possible to do the recovery process completely manually.
The recovery process is detailed in the documentation.
.SS currentbackup
.PP
Back up the current WAL file and remove old WAL backups.
This command should be called from a cronjob.
.SS cleanup [ \f[I]BASEBACKUP\f[] | \f[I]XLOG\f[] | \f[I]+N\f[] ]
.PP
Remove old, unneeded base backups and WAL files.
This command sould also run by a cron job.
.PP
You would typically run this command from a cron job once a minute
(depending on the desired backup frequency).
.PP
If \f[I]BASEBACKUP\f[] is specified, then all base backups and WAL files
that are \f[B]older\f[] than \f[I]BASEBACKUP\f[] will be removed, while
\f[I]BASEBACKUP\f[] itself and all newer base backups and WAL files will
not be touched.
Likewise, you can specify a WAL backup file \f[I]XLOG\f[], in which case
anything older than the base backup to which this WAL backup belongs
will be removed.
.PP
If a positive number \f[I]N\f[] is specified, the cleanup command will
treat it as its retention policy and keep at least this number of base
backup files.
.PP
If no argument is specified, \f[B]cleanup\f[] will use the latest base
backup as its point of reference, i.
e.
all WAL files that are not needed by this base backup and all older base
backups will be removed.
.SS ls[+]
.PP
Lists available base backups and their size in the current archive.
When issued with \f[B]+\f[], the \f[B]ls\f[] command will examine the
WAL archive and display the minimum WAL segment file required to use the
backup to perform a full recovery.
.SH OPTIONS
.PP
The following command\-line options control actions done by
\f[B]pg_backup_ctl\f[].
.SS \-A \f[I]ARCHIVEDIR\f[]
.PP
The directory which will contain all backup files, configuration files
and history files.
This parameter is required for all commands.
.SS \-D \f[I]DATADIR\f[]
.PP
PostgresSQL data directory.
If this parameter is not specified, it will be retrieved from a running
PostgreSQL instead.
.SS \-T \f[I]TABLESPACES\f[]
.PP
Target directory for tablespaces during restore.
This directory must contain one subdirectory for each tablespace (with
the corresponding name).
These subdirectories must be empty.
The original symlinks in the base backup will be replaced and all
tablespaces will be restored to their corresponding folders inside
\f[I]TABLESPACES\f[].
.SS \-m
.PP
When specified with the \f[B]cleanup\f[] command, old archive log files
will be backed up before being deleted.
.SS \-z
.PP
When specified with the \f[B]setup\f[] command, \f[B]archive_command\f[]
will be configured to use \f[B]gzip\f[] to compress archived WAL
segments.
.SS \-l \f[I]LOCKDIR\f[]
.PP
Place \f[B]pg_backup_ctl\f[]\[aq]s lock file in the specified directory
(if not specified, the lock file will be placed inside
\f[I]ARCHIVEDIR\f[]).
.SS \-L \f[I]LVMSIZE\f[]
.PP
Sets the buffer size for an LVM snapshot.
This will be passed directly to \f[B]lvcreate\f[] and thus accepts the
same units, e.
g.
"100M".
.SS \-M \f[I]VOLUME\f[]
.PP
LVM volume identifier from which the snapshot will be created.
This needs to be a full path to the device (including "/dev").
Needed for LVM backups.
.SS \-n \f[I]SNAPNAME\f[]
.PP
LVM snapshot volume name.
Needed for LVM backups.
The \f[B]backup_label\f[] will be named after it.
.SS \-N \f[I]LVMDATADIR\f[]
.PP
PostgreSQL data directory relative to partition (i.
e.
the path to \f[I]DATADIR\f[] inside the logical volume).
.SS \-o \f[I]MOUNTOPTS\f[]
.PP
Additional options for mounting the LVM snapshot.
This will be passed to \f[B]mount\f[] directly.
.SS \-t \f[I]FSTYPE\f[]
.PP
File system type of the LVM snapshot.
This will be passed to \f[B]mount\f[] directly.
.SS \-h \f[I]HOSTNAME\f[]
.PP
Specifies the host name of the machine on which the PostgreSQL server is
running.
If the value begins with a slash, it is used as the directory for the
Unix domain socket.
(See \f[B]psql\f[](1) for details)
.SS \-p \f[I]PORT\f[]
.PP
Specifies the TCP port or local Unix domain socket file extension on
which the server is listening for connections.
(See \f[B]psql\f[](1) for details)
.SS \-U \f[I]USERNAME\f[]
.PP
User name to connect as to the PostgreSQL server.
.SH EXAMPLES
.PP
Setting up the environment and PostgreSQL configuration settings for
further cluster backups in /mnt/backup/pgsql:
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql \f[B]setup\f[]
.PP
Performing a base backup (note: the environment should have been setup
by running the \f[B]setup\f[] command earlier):
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql
\f[B]basebackup\f[]
.PP
Performing a streaming base backup (note: the environment should have
been setup by running the \f[B]setup\f[] command earlier and by
configuring the PostgreSQL server to allow streaming replication):
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql
\f[B]streambackup\f[]
.PP
Performing a base backup with rsync (note: the environment should have
been setup by running the \f[B]setup\f[] command earlier, and
\f[B]rsync\f[] should be accessible via \f[B]PATH\f[]):
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql
\f[B]rsyncbackup\f[]
.PP
Performing an LVM base backup.
PostgreSQL\[aq]s data dir is the folder "data", which is located on the
logical volume "lvpg", which belongs to the volume group "vgpg".
Thus, the command is as follows (note: the environment should have been
setup by running the \f[B]setup\f[] command earlier, and
\f[B]postgres\f[] has the required privileges):
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql \f[B]\-L\f[]
100M \f[B]\-M\f[] /dev/vgpg/lvpg \f[B]\-n\f[] pgsnap \-N data
\f[B]lvmbasebackup\f[]
.PP
Copying the current log segment(s):
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql
\f[B]currentbackup\f[]
.PP
Listing all available backups:
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql \f[B]ls+\f[]
.PP
Restoring a base backup (e.
g.
basebackup_2013\-01\-04T1517.tar.gz) to the directory /recover/pgsql
(the server may not run):
.PP
$ \f[B]pg_backup_ctl\f[] \f[B]\-A\f[] /mnt/backup/pgsql \f[B]\-D\f[]
/recovery/pgsql \f[B]restore\f[] basebackup_2013\-01\-04T1517.tar.gz
.PP
$ \f[B]pg_ctl\f[] \f[B]start\f[] \f[B]\-D\f[] /recovery/pgsql
.SH CAVEATS
.PP
pg_backup_ctl internally protects itself against concurrent execution
with the \f[B]flock\f[] command line tool.
This places a lock file into the archive directory, which will hold an
exclusive lock on it to prevent another \f[B]pg_backup_ctl\f[] to
concurrently modify the archive.
This doesn\[aq]t work on network filesystems like SMBFS or CIFS,
especially when mounted from a Windows(tm) server.
In this case you should use the \f[B]\-l\f[] option to place the lock
file into a directory on a local filesystem.
Older distributions don\[aq]t provide the \f[B]flock\f[] command line
tool, but you can work around this by commenting out the locking
subscripts.
.SH SEE ALSO
.PP
\f[B]pg_dump\f[](1), \f[B]psql\f[](1), \f[B]pg_basebackup\f[](1),
\f[B]flock\f[](1)
